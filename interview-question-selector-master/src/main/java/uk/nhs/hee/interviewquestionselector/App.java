/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package uk.nhs.hee.interviewquestionselector;

import static java.nio.file.Files.isDirectory;
import static java.nio.file.Files.lines;
import static java.nio.file.Files.list;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class App {

  public static void main(String[] args) throws IOException {

    Map<String, List<String>> map = printFiles();
    outputQuestions(map);
  }

  private static Map<String, List<String>> printFiles() throws IOException {
    Map<String, List<String>> fileNamesToQuestions = new HashMap<>();         //Hash Map

    Scanner inScanner = new Scanner(System.in);
    inScanner.useDelimiter("\n");
    System.out.println("Enter input file path and name: ");
    String inFile = inScanner.next();
    System.out.println("You entered: " + inFile);

    ArrayList<Path> childFolderList = new ArrayList<>();
    Path folderPath = Paths.get(inFile);
    if (isDirectory(folderPath)) {
      System.out.println("Folder exists");
      List<Path> listPaths = processDirectory(folderPath);

      for (Path listPath : listPaths) {        //enhanced for loop
        List<String> newQuestions = searchNewFile(listPath);
        fileNamesToQuestions.put(listPath.getFileName().toString(), newQuestions);
      }
      System.out.println(fileNamesToQuestions);     //print list of numbered questions
    } else {
      System.out.println("Folder does not exist");
    }
    return fileNamesToQuestions;    //returns map
  }

  private static List<Path> processDirectory(Path directoryPath) throws IOException {
    List<Path> childFilePaths = new ArrayList<>();
    List<Path> childPaths = getChildren(directoryPath);

    for (Path childPath : childPaths) {
      if (Files.isDirectory(childPath)) {
        List<Path> childDirectoryFiles = processDirectory(childPath); // recursion happens here
        childFilePaths.addAll(childDirectoryFiles);
      } else if (Files.isRegularFile(childPath)) {
        childFilePaths.add(childPath);
      } else {
        System.out.println("Unexpected file.");       // to do: handle edge case, print something
      }
    }
    return childFilePaths;
  }

  private static List<Path> getChildren(Path directoryPath) throws IOException {
    Stream<Path> fileSearch = list(directoryPath);
    return fileSearch.collect(Collectors.toList());
  }

  private static List<String> searchNewFile(Path path) throws IOException {

    //variable newFile assigned to file path for Java.txt
    // Path path = Paths.get("C:/Users/Peter.Collum/Desktop/notepad/new_file.txt");     //<<remove hardcoded filepath and add print files method from above

    Stream<String> newFile = lines(path);
    List<String> listLines = newFile.collect(Collectors.toList());  //list of lines in the file
    Collections.shuffle(listLines);       // shuffle lines

    if (listLines.size()
        == 0) {                                         //if no content in file print message
      System.out.println("No content found in " + path.getFileName());
    } else {
      // ask for how many questions to be printed
      Scanner scanner = new Scanner(System.in);
      System.out.println("How many questions required from " + path.getFileName() + "?");
      int numQuestion = scanner.nextInt();

      if (numQuestion < listLines
          .size()) {     //if number of questions is greater than list of questions in file, print all questions
        listLines = listLines.subList(0, numQuestion);  //print sub list of requested questions
      }
    }
    return listLines;       //returns list
  }

  private static void outputQuestions(Map<String, List<String>> filenamesToQuestions)
      throws FileNotFoundException {
    FileOutputStream fos = new FileOutputStream("new_file.txt");    //print to file
    PrintWriter pw = new PrintWriter(fos);

    for (Entry<String, List<String>> entry : filenamesToQuestions.entrySet()) {    //map
      String fileName = entry.getKey();
      List<String> questions = entry.getValue();
      pw.println(fileName);
      for (String question : questions) {    //list of questions. question relates to the category and questions is the number of questions requested
        pw.println(question);               //prints list of question per category
      }
      pw.println();   //print empty line
    }
    pw.close();     //close print statement
  }
}



